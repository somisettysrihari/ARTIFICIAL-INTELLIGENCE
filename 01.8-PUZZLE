from collections import deque

def solve_puzzle(start, goal):
    def neighbors(state):
        zero = state.index(0)
        for d in [-1, 1, -3, 3]:  # left, right, up, down
            if 0 <= zero + d < 9 and not (zero % 3 == 0 and d == -1) and not (zero % 3 == 2 and d == 1):
                new_state = list(state)
                new_state[zero], new_state[zero + d] = new_state[zero + d], new_state[zero]
                yield tuple(new_state)

    queue, visited = deque([(start, [])]), {start}
    while queue:
        state, path = queue.popleft()
        if state == goal:
            return path
        for next_state in neighbors(state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [next_state]))

start = (1, 2, 3, 4, 5, 6, 7, 0, 8)
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)
solution = solve_puzzle(start, goal)
print(solution)
